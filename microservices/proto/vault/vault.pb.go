// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vault.proto

/*
Package pb_vault is a generated protocol buffer package.

It is generated from these files:
	vault.proto

It has these top-level messages:
	HashRequest
	HashResponce
	ValidateRequest
	ValidateResponce
	HealthRequest
	HealthResponse
*/
package pb_vault

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HashRequest struct {
	Password string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
}

func (m *HashRequest) Reset()                    { *m = HashRequest{} }
func (m *HashRequest) String() string            { return proto.CompactTextString(m) }
func (*HashRequest) ProtoMessage()               {}
func (*HashRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HashRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type HashResponce struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Err  string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *HashResponce) Reset()                    { *m = HashResponce{} }
func (m *HashResponce) String() string            { return proto.CompactTextString(m) }
func (*HashResponce) ProtoMessage()               {}
func (*HashResponce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HashResponce) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *HashResponce) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ValidateRequest struct {
	Password string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Hash     string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
}

func (m *ValidateRequest) Reset()                    { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()               {}
func (*ValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ValidateRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ValidateRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type ValidateResponce struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *ValidateResponce) Reset()                    { *m = ValidateResponce{} }
func (m *ValidateResponce) String() string            { return proto.CompactTextString(m) }
func (*ValidateResponce) ProtoMessage()               {}
func (*ValidateResponce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ValidateResponce) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ValidateResponce) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type HealthResponse struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HealthResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*HashRequest)(nil), "proto.vault.HashRequest")
	proto.RegisterType((*HashResponce)(nil), "proto.vault.HashResponce")
	proto.RegisterType((*ValidateRequest)(nil), "proto.vault.ValidateRequest")
	proto.RegisterType((*ValidateResponce)(nil), "proto.vault.ValidateResponce")
	proto.RegisterType((*HealthRequest)(nil), "proto.vault.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "proto.vault.HealthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Vault service

type VaultClient interface {
	Hash(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponce, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponce, error)
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type vaultClient struct {
	cc *grpc.ClientConn
}

func NewVaultClient(cc *grpc.ClientConn) VaultClient {
	return &vaultClient{cc}
}

func (c *vaultClient) Hash(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponce, error) {
	out := new(HashResponce)
	err := grpc.Invoke(ctx, "/proto.vault.Vault/Hash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponce, error) {
	out := new(ValidateResponce)
	err := grpc.Invoke(ctx, "/proto.vault.Vault/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/proto.vault.Vault/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Vault service

type VaultServer interface {
	Hash(context.Context, *HashRequest) (*HashResponce, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponce, error)
	HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error)
}

func RegisterVaultServer(s *grpc.Server, srv VaultServer) {
	s.RegisterService(&_Vault_serviceDesc, srv)
}

func _Vault_Hash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Hash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.vault.Vault/Hash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Hash(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.vault.Vault/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.vault.Vault/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.vault.Vault",
	HandlerType: (*VaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hash",
			Handler:    _Vault_Hash_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Vault_Validate_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Vault_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vault.proto",
}

func init() { proto.RegisterFile("vault.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x6d, 0x4a, 0x5b, 0x85, 0x0b, 0xd0, 0xea, 0x04, 0x25, 0x78, 0x42, 0x9e, 0xca, 0x92, 0x01,
	0x90, 0x90, 0xd8, 0xa0, 0x4b, 0xe7, 0x0c, 0xdd, 0xdd, 0xf6, 0xa4, 0x20, 0x22, 0x12, 0x72, 0x4e,
	0xf9, 0x46, 0xfe, 0x0a, 0xd9, 0x8e, 0x93, 0xa8, 0x74, 0xe8, 0xe6, 0xf7, 0xee, 0xf4, 0xde, 0xbd,
	0x67, 0x88, 0xf6, 0xaa, 0xce, 0x75, 0x52, 0x56, 0x85, 0x2e, 0x30, 0x2c, 0x37, 0x89, 0xc5, 0xf2,
	0x01, 0xa2, 0x95, 0xe2, 0x2c, 0xa5, 0xef, 0x9a, 0x58, 0xa3, 0x80, 0xb0, 0x54, 0xcc, 0x3f, 0x45,
	0xb5, 0x8b, 0x83, 0xfb, 0x60, 0x71, 0x9e, 0xb6, 0x58, 0x3e, 0xc3, 0x85, 0x5b, 0xe5, 0xb2, 0xf8,
	0xda, 0x12, 0x22, 0x8c, 0x32, 0xc5, 0x59, 0xb3, 0x67, 0xdf, 0x38, 0x83, 0x33, 0xaa, 0xaa, 0x78,
	0x68, 0x29, 0xf3, 0x94, 0x6f, 0x30, 0x5d, 0xab, 0xfc, 0x63, 0xa7, 0x34, 0x9d, 0x60, 0xd2, 0x8a,
	0x0e, 0x3b, 0x51, 0xf9, 0x0a, 0xb3, 0x4e, 0xa2, 0x31, 0xbf, 0x86, 0xf1, 0xde, 0x70, 0x56, 0x20,
	0x4c, 0x1d, 0x38, 0x62, 0x3f, 0x85, 0xcb, 0x15, 0xa9, 0x5c, 0xfb, 0x84, 0x72, 0x01, 0x57, 0x9e,
	0x30, 0x52, 0x4c, 0x38, 0x87, 0x09, 0x6b, 0xa5, 0x6b, 0x6e, 0xb4, 0x1a, 0xf4, 0xf8, 0x1b, 0xc0,
	0x78, 0x6d, 0x4a, 0xc2, 0x17, 0x18, 0x99, 0xe4, 0x78, 0x93, 0xf8, 0xde, 0x92, 0x5e, 0x69, 0x62,
	0x7e, 0x48, 0xbb, 0x1b, 0xe5, 0x00, 0x97, 0x10, 0xfa, 0xcb, 0xf1, 0xae, 0xdb, 0x3a, 0x28, 0x44,
	0x88, 0x63, 0xa3, 0x56, 0xe4, 0x1d, 0x22, 0x77, 0xf1, 0x32, 0xa3, 0xed, 0x27, 0xde, 0xf6, 0xdc,
	0xfa, 0xc9, 0x44, 0xfc, 0x7f, 0xe0, 0x12, 0xca, 0xc1, 0x66, 0x62, 0xff, 0xfd, 0xe9, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0x37, 0x10, 0xa7, 0x06, 0x02, 0x00, 0x00,
}
